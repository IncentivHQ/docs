{
  "openapi": "3.1.0",
  "info": {
    "title": "Mainnet Indexer API",
    "description": "API endpoint for listing blocks from the Incentiv Blockchain via the IncentiView indexer.",
    "version": "2.1.0"
  },
  "servers": [
    {
      "url": "https://indexer.incentiv.io"
    }
  ],
  "paths": {
    "/useroperations": {
      "get": {
        "summary": "List User Operations",
        "description": "Retrieve a list of user operations with optional filters for timestamp, block number, sender, and more.",
        "parameters": [
          {
            "name": "fromTimestamp",
            "in": "query",
            "required": false,
            "description": "UNIX timestamp (seconds) marking the start of the time range to filter user operations.",
            "schema": { "type": "integer", "format": "int64" },
            "example": 1710000000
          },
          {
            "name": "toTimestamp",
            "in": "query",
            "required": false,
            "description": "UNIX timestamp (seconds) marking the end of the time range to filter user operations.",
            "schema": { "type": "integer", "format": "int64" },
            "example": 1710090000
          },
          {
            "name": "fromBlockNumber",
            "in": "query",
            "required": false,
            "description": "Start of the block number range.",
            "schema": { "type": "integer" },
            "example": 1000
          },
          {
            "name": "toBlockNumber",
            "in": "query",
            "required": false,
            "description": "End of the block number range.",
            "schema": { "type": "integer" },
            "example": 1100
          },
          {
            "name": "sender",
            "in": "query",
            "required": false,
            "description": "Sender address to filter user operations.",
            "schema": { "type": "string" },
            "example": "0x123abc456def7890"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "description": "Status of the user operation to filter by.",
            "schema": { "type": "string" },
            "example": "success"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Offset for pagination.",
            "schema": { "type": "integer" },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Maximum number of user operations to return.",
            "schema": { "type": "integer" },
            "example": 25
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Sorting order for returned user operations. Options: `TIMESTAMP_ASC`, `TIMESTAMP_DESC`, `NUMBER_ASC`, `NUMBER_DESC`.",
            "schema": { "type": "string" },
            "example": "TIMESTAMP_DESC"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of user operation entries.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": { "type": "integer" },
                    "items": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/UserOperation" }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/useroperations/{hash}": {
      "get": {
        "summary": "Get User Operation by Hash",
        "description": "Retrieve detailed information about a specific user operation by its hash.",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "description": "Hash of the user operation to retrieve.",
            "schema": { "type": "string" },
            "example": "0xop123abc456def"
          }
        ],
        "responses": {
          "200": {
            "description": "User operation details.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/UserOperation" }
              }
            }
          },
          "404": {
            "description": "User operation not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/useroperations/{hash}/transfers": {
      "get": {
        "summary": "Get Transfers for a User Operation",
        "description": "Retrieve transfer events generated by a specific user operation hash.",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "description": "Hash of the user operation to retrieve transfers for.",
            "schema": { "type": "string" },
            "example": "0xop123abc456def"
          }
        ],
        "responses": {
          "200": {
            "description": "List of transfer events associated with the user operation.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Transfer" }
                }
              }
            }
          },
          "404": {
            "description": "User operation not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/account/{address}/assets": {
      "get": {
        "summary": "Get Account Assets",
        "description": "Retrieve a list of assets held by a specific account address.",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "description": "Account address to retrieve assets for.",
            "schema": { "type": "string" },
            "example": "0x123abc456def7890"
          }
        ],
        "responses": {
          "200": {
            "description": "List of assets held by the account.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Asset" }
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/account/{address}/transfers": {
      "get": {
        "summary": "Get Account Transfers",
        "description": "List all transfer events related to a specific account address.",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "description": "Account address to retrieve transfers for.",
            "schema": { "type": "string" },
            "example": "0x123abc456def7890"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Offset for pagination.",
            "schema": { "type": "integer" },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Maximum number of transfers to return.",
            "schema": { "type": "integer" },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "List of transfers related to the account.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/Transfer" }
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/account/{address}/useroperations": {
         "get": {
        "summary": "Get Account User Operations",
        "description": "Retrieve outgoing user operations for a specific account address.",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "description": "Account address to retrieve user operation activity for.",
            "schema": { "type": "string" },
            "example": "0x123abc456def7890"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Offset for pagination.",
            "schema": { "type": "integer" },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Maximum number of user operations to return.",
            "schema": { "type": "integer" },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "List of user operations initiated by the account.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/UserOperation" }
                }
              }
            }
          },
          "404": {
            "description": "Account not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/account/{address}/userop-activity": {
      "get": {
        "summary": "Get Account User Operation Activity",
        "description": "Retrieve both incoming and outgoing user operations for a specific account address.",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "required": true,
            "description": "Account address to retrieve user operation activity for.",
            "schema": { "type": "string" },
            "example": "0x123abc456def7890"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "description": "Filter by direction of the user operation: 'incoming', 'outgoing', or 'all' (default).",
            "schema": {
              "type": "string",
              "enum": ["incoming", "outgoing", "all"],
              "default": "all"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Offset for pagination.",
            "schema": { "type": "integer" },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Maximum number of user operations to return (default: 10 records).",
            "schema": { "type": "integer" },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "List of user operations initiated by or received by the account.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": { "$ref": "#/components/schemas/UserOperation" }
                }
              }
            }
          },
          "404": {
            "description": "Account not found or no activity.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/assets": {
      "get": {
        "summary": "List Assets",
        "description": "Retrieve a list of all available assets with optional filters.",
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Type of asset to filter by (e.g., 'erc20', 'erc721', 'native').",
            "schema": { "type": "string" },
            "example": "erc20"
          },
          {
            "name": "symbol",
            "in": "query",
            "required": false,
            "description": "Symbol of the asset to filter by.",
            "schema": { "type": "string" },
            "example": "INC"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Offset for pagination.",
            "schema": { "type": "integer" },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Maximum number of assets to return.",
            "schema": { "type": "integer" },
            "example": 25
          }
        ],
        "responses": {
          "200": {
            "description": "A list of assets.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": { "type": "integer" },
                    "items": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/Asset" }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/assets/{assetId}": {
      "get": {
        "summary": "Get Asset Details",
        "description": "Retrieve metadata and statistics for a specific asset.",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "description": "Asset identifier to retrieve details for.",
            "schema": { "type": "string" },
            "example": "0x123abc456def7890"
          }
        ],
        "responses": {
          "200": {
            "description": "Asset metadata and statistics.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Asset" }
              }
            }
          },
          "404": {
            "description": "Asset not found",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/Error" }
              }
            }
          }
        }
      }
    },
    "/blocks": {
      "get": {
        "summary": "List Blocks",
        "description": "Retrieve a list of blocks with optional filters for timestamp and block number range.",
        "parameters": [
          {
            "name": "fromTimestamp",
            "in": "query",
            "required": false,
            "description": "UNIX timestamp (seconds) marking the start of the time range to filter blocks.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1710000000
          },
          {
            "name": "toTimestamp",
            "in": "query",
            "required": false,
            "description": "UNIX timestamp (seconds) marking the end of the time range to filter blocks.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1710090000
          },
          {
            "name": "fromBlockNumber",
            "in": "query",
            "required": false,
            "description": "Start of the block number range.",
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "toBlockNumber",
            "in": "query",
            "required": false,
            "description": "End of the block number range.",
            "schema": {
              "type": "integer"
            },
            "example": 1100
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Offset for pagination. Use in combination with `limit`.",
            "schema": {
              "type": "integer"
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Maximum number of blocks to return in a single response. Recommended max: 100.",
            "schema": {
              "type": "integer"
            },
            "example": 25
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Sorting order for returned blocks. Options: `TIMESTAMP_ASC`, `TIMESTAMP_DESC`, `NUMBER_ASC`, `NUMBER_DESC`.",
            "schema": {
              "type": "string"
            },
            "example": "NUMBER_DESC"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of block metadata entries.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer"
                    },
                    "pageable": {
                      "type": "integer"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Block"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/blocks/{hashOrNumber}": {
      "get": {
        "summary": "Get Block by Hash or Number",
        "description": "Retrieve detailed information about a specific block by its hash or number.",
        "parameters": [
          {
            "name": "hashOrNumber",
            "in": "path",
            "required": true,
            "description": "The block hash or block number to retrieve.",
            "schema": {
              "type": "string"
            },
            "example": "0xabc123... or 123456"
          }
        ],
        "responses": {
          "200": {
            "description": "Block details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Block"
                }
              }
            }
          },
          "404": {
            "description": "Block not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/blocks/{hashOrNumber}/transactions": {
      "get": {
        "summary": "Get Transactions for a Block",
        "description": "Retrieve all transactions included in a specific block by its hash or number.",
        "parameters": [
          {
            "name": "hashOrNumber",
            "in": "path",
            "required": true,
            "description": "The block hash or block number to retrieve transactions for.",
            "schema": {
              "type": "string"
            },
            "example": "0xabc123... or 123456"
          }
        ],
        "responses": {
          "200": {
            "description": "List of transactions in the block.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transaction"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Block not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/blocks/{hashOrNumber}/useroperations": {
      "get": {
        "summary": "Get User Operations for a Block",
        "description": "Retrieve all user operations (AA) included in a specific block by its hash or number.",
        "parameters": [
          {
            "name": "hashOrNumber",
            "in": "path",
            "required": true,
            "description": "The block hash or block number to retrieve user operations for.",
            "schema": {
              "type": "string"
            },
            "example": "0xabc123... or 123456"
          }
        ],
        "responses": {
          "200": {
            "description": "List of user operations in the block.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserOperation"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Block not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/home/search": {
      "get": {
        "summary": "Search Home",
        "description": "Search endpoint with multiple optional filters including block number, timestamp range, type, and pagination.",
        "parameters": [
          {
            "name": "from",
            "in": "query",
            "required": false,
            "description": "Start of the range filter, could be a block number or timestamp depending on context.",
            "schema": {
              "type": "string"
            },
            "example": "1000"
          },
          {
            "name": "to",
            "in": "query",
            "required": false,
            "description": "End of the range filter, could be a block number or timestamp depending on context.",
            "schema": {
              "type": "string"
            },
            "example": "1100"
          },
          {
            "name": "blockNumber",
            "in": "query",
            "required": false,
            "description": "Specific block number to filter results.",
            "schema": {
              "type": "integer"
            },
            "example": 1050
          },
          {
            "name": "fromTimestamp",
            "in": "query",
            "required": false,
            "description": "UNIX timestamp (seconds) marking the start of the time range.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1710000000
          },
          {
            "name": "toTimestamp",
            "in": "query",
            "required": false,
            "description": "UNIX timestamp (seconds) marking the end of the time range.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1710090000
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Maximum number of results to return.",
            "schema": {
              "type": "integer"
            },
            "example": 25
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Offset for pagination.",
            "schema": {
              "type": "integer"
            },
            "example": 0
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Sorting order of the results. Options may include `TIMESTAMP_ASC`, `TIMESTAMP_DESC`, `NUMBER_ASC`, `NUMBER_DESC`.",
            "schema": {
              "type": "string"
            },
            "example": "TIMESTAMP_DESC"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Type of entity to filter by, e.g., `block`, `transaction`, `userOperation`.",
            "schema": {
              "type": "string"
            },
            "example": "transaction"
          }
        ],
        "responses": {
          "200": {
            "description": "Search results matching the query parameters.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "type": "object"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/transactions": {
      "get": {
        "summary": "List Transactions",
        "description": "Retrieve a list of transactions with optional filters and pagination.",
        "parameters": [
          {
            "name": "fromTimestamp",
            "in": "query",
            "required": false,
            "description": "UNIX timestamp (seconds) marking the start of the time range to filter transactions.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1710000000
          },
          {
            "name": "toTimestamp",
            "in": "query",
            "required": false,
            "description": "UNIX timestamp (seconds) marking the end of the time range to filter transactions.",
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1710090000
          },
          {
            "name": "fromBlockNumber",
            "in": "query",
            "required": false,
            "description": "Start of the block number range to filter transactions.",
            "schema": {
              "type": "integer"
            },
            "example": 1000
          },
          {
            "name": "toBlockNumber",
            "in": "query",
            "required": false,
            "description": "End of the block number range to filter transactions.",
            "schema": {
              "type": "integer"
            },
            "example": 1100
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Offset for pagination.",
            "schema": {
              "type": "integer"
            },
            "example": 0
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Maximum number of transactions to return.",
            "schema": {
              "type": "integer"
            },
            "example": 25
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Sorting order for returned transactions. Options: `TIMESTAMP_ASC`, `TIMESTAMP_DESC`, `NUMBER_ASC`, `NUMBER_DESC`.",
            "schema": {
              "type": "string"
            },
            "example": "TIMESTAMP_DESC"
          }
        ],
        "responses": {
          "200": {
            "description": "A list of transaction metadata entries.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": {
                      "type": "integer"
                    },
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Transaction"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid query parameters",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{hash}": {
      "get": {
        "summary": "Get Transaction by Hash",
        "description": "Retrieve detailed information about a specific transaction by its hash.",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "description": "Hash of the transaction to retrieve.",
            "schema": {
              "type": "string"
            },
            "example": "0x123abc456def7890"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Transaction"
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{hash}/useroperations": {
      "get": {
        "summary": "Get User Operations for a Transaction",
        "description": "Retrieve user operations (AA) associated with a specific transaction hash.",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "description": "Hash of the transaction to retrieve user operations for.",
            "schema": {
              "type": "string"
            },
            "example": "0x123abc456def7890"
          }
        ],
        "responses": {
          "200": {
            "description": "List of user operations associated with the transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserOperation"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{hash}/transfers": {
      "get": {
        "summary": "Get Transfers for a Transaction",
        "description": "Retrieve transfer events associated with a specific transaction hash.",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "required": true,
            "description": "Hash of the transaction to retrieve transfers for.",
            "schema": {
              "type": "string"
            },
            "example": "0x123abc456def7890"
          }
        ],
        "responses": {
          "200": {
            "description": "List of transfer events associated with the transaction.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Transfer"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Transaction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/nfts": {
      "get": {
        "summary": "List NFTs",
        "description": "Retrieve a list of NFTs available on the Incentiv blockchain.",
        "parameters": [
          {
            "name": "symbol",
            "in": "query",
            "required": false,
            "description": "Symbol of the NFT collection to filter by.",
            "schema": { "type": "string" }
          },
          {
            "name": "creator",
            "in": "query",
            "required": false,
            "description": "Address of the creator to filter by.",
            "schema": { "type": "string" }
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "description": "Pagination offset.",
            "schema": { "type": "integer" }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Maximum number of NFTs to return.",
            "schema": { "type": "integer" }
          }
        ],
        "responses": {
          "200": {
            "description": "A list of NFTs.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "total": { "type": "integer" },
                    "items": {
                      "type": "array",
                      "items": { "$ref": "#/components/schemas/NFT" }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/nfts/{assetId}": {
      "get": {
        "summary": "Get NFT Metadata",
        "description": "Retrieve metadata and ownership information for a specific NFT by asset ID.",
        "parameters": [
          {
            "name": "assetId",
            "in": "path",
            "required": true,
            "description": "NFT asset identifier (e.g., contract address or token ID).",
            "schema": { "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "NFT metadata and ownership information.",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/NFT" }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
     "Asset": {
  "type": "object",
  "properties": {
    "assetId": { "type": "string" },
    "contract": { "type": "string" },
    "subAssetId": { "type": "string" },
    "name": { "type": "string" },
    "symbol": { "type": "string" },
    "decimals": { "type": "integer" },
    "type": { "type": "string" },
    "totalSupply": { "type": "string" },
    "uri": { "type": "string" },
    "transferCount": { "type": "integer" },
    "totalVolume": { "type": "string" },
    "volumeDaily": {
      "type": "array",
      "items": { "type": "object" }
    },
    "totalHolders": { "type": "integer" },
    "holdersDaily": {
      "type": "array",
      "items": { "type": "object" }
    },
    "iconUrl": { "type": "string", "format": "uri" },
    "price": { "type": "number" },
    "isVerified": { "type": "boolean" },
    "isHidden": { "type": "boolean" },
    "isListed": { "type": "boolean" },
    "links": {
      "type": "array",
      "items": { "type": "object" }
    },
    "tags": {
      "type": "array",
      "items": { "type": "string" }
    }
  },
  "required": ["assetId", "symbol", "name", "decimals", "type", "totalSupply"]
},
      "Block": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "description": "Unique hash that identifies the block."
          },
          "number": {
            "type": "integer",
            "description": "Block number in the blockchain."
          },
          "timestamp": {
            "type": "integer",
            "description": "UNIX timestamp of when the block was mined."
          },
          "gasUsed": {
            "type": "string",
            "description": "Total gas used in the block."
          },
          "gasLimit": {
            "type": "string",
            "description": "Total gas limit of the block."
          },
          "baseFeePerGas": {
            "type": "string",
            "description": "Base fee per gas used, introduced in EIP-1559."
          },
          "miner": {
            "type": "string",
            "description": "Address of the miner who mined the block."
          },
          "txCount": {
            "type": "integer",
            "description": "Number of transactions included in the block."
          },
          "userOpCount": {
            "type": "integer",
            "description": "Number of user operations (AA) in the block."
          }
        },
        "required": [
          "hash",
          "number",
          "timestamp",
          "gasUsed",
          "gasLimit",
          "baseFeePerGas",
          "miner",
          "txCount",
          "userOpCount"
        ]
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "description": "Unique hash that identifies the transaction."
          },
          "blockNumber": {
            "type": "integer",
            "description": "Block number in which this transaction was included."
          },
          "timestamp": {
            "type": "integer",
            "description": "UNIX timestamp of when the transaction was mined."
          },
          "from": {
            "type": "string",
            "description": "Address of the sender of the transaction."
          },
          "to": {
            "type": "string",
            "description": "Address of the receiver of the transaction."
          },
          "value": {
            "type": "string",
            "description": "Amount of cryptocurrency transferred in the transaction."
          },
          "gasUsed": {
            "type": "string",
            "description": "Gas used by this transaction."
          },
          "gasPrice": {
            "type": "string",
            "description": "Gas price paid per unit of gas."
          },
          "nonce": {
            "type": "integer",
            "description": "Transaction nonce to prevent replay attacks."
          },
          "input": {
            "type": "string",
            "description": "Input data sent with the transaction."
          },
          "status": {
            "type": "string",
            "description": "Status of the transaction execution, e.g., success or failure."
          }
        },
        "required": [
          "hash",
          "blockNumber",
          "timestamp",
          "from",
          "to",
          "value",
          "gasUsed",
          "gasPrice",
          "nonce",
          "input",
          "status"
        ]
      },
      "UserOperation": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "description": "Unique hash identifying the user operation."
          },
          "sender": {
            "type": "string",
            "description": "Address of the sender initiating the user operation."
          },
          "nonce": {
            "type": "string",
            "description": "Nonce value to ensure uniqueness of the user operation."
          },
          "initCode": {
            "type": "string",
            "description": "Initialization code for the user operation."
          },
          "callData": {
            "type": "string",
            "description": "Call data payload of the user operation."
          },
          "callGasLimit": {
            "type": "string",
            "description": "Gas limit for the call part of the user operation."
          },
          "verificationGasLimit": {
            "type": "string",
            "description": "Gas limit for the verification part of the user operation."
          },
          "preVerificationGas": {
            "type": "string",
            "description": "Gas paid before verification."
          },
          "maxFeePerGas": {
            "type": "string",
            "description": "Maximum fee per gas the sender is willing to pay."
          },
          "maxPriorityFeePerGas": {
            "type": "string",
            "description": "Maximum priority fee per gas."
          },
          "paymaster": {
            "type": "string",
            "description": "Address of the paymaster if any."
          },
          "paymasterData": {
            "type": "string",
            "description": "Additional data for the paymaster."
          },
          "signature": {
            "type": "string",
            "description": "Signature of the user operation."
          },
          "status": {
            "type": "string",
            "description": "Status of the user operation execution."
          }
        },
        "required": [
          "hash",
          "sender",
          "nonce",
          "initCode",
          "callData",
          "callGasLimit",
          "verificationGasLimit",
          "preVerificationGas",
          "maxFeePerGas",
          "maxPriorityFeePerGas",
          "paymaster",
          "paymasterData",
          "signature",
          "status"
        ]
      },
      "Transfer": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Address from which the asset was transferred."
          },
          "to": {
            "type": "string",
            "description": "Address to which the asset was transferred."
          },
          "value": {
            "type": "string",
            "description": "Amount of asset transferred."
          },
          "token": {
            "type": "string",
            "description": "Address or identifier of the token transferred."
          },
          "transactionHash": {
            "type": "string",
            "description": "Hash of the transaction that included this transfer."
          },
          "logIndex": {
            "type": "integer",
            "description": "Index of the log entry within the transaction receipt."
          }
        },
        "required": [
          "from",
          "to",
          "value",
          "token",
          "transactionHash",
          "logIndex"
        ]
      },
      "NFT": {
        "type": "object",
        "properties": {
          "assetId": {
            "type": "string",
            "description": "Unique identifier for the NFT."
          },
          "name": {
            "type": "string",
            "description": "Name of the NFT."
          },
          "symbol": {
            "type": "string",
            "description": "Symbol of the NFT collection."
          },
          "creator": {
            "type": "string",
            "description": "Address of the NFT creator."
          },
          "uri": {
            "type": "string",
            "description": "Token URI pointing to metadata."
          },
          "owner": {
            "type": "string",
            "description": "Current owner address of the NFT."
          },
          "type": {
            "type": "string",
            "description": "Type of the asset (e.g., 'erc721', 'erc1155')."
          },
          "metadata": {
            "type": "object",
            "description": "Additional metadata for display, such as image, description, attributes."
          }
        },
        "required": [
          "assetId",
          "name",
          "symbol",
          "creator",
          "uri",
          "owner",
          "type"
        ]
      },
      "Error": {
        "type": "object",
        "required": [
          "error",
          "message"
        ],
        "properties": {
          "error": {
            "type": "integer",
            "description": "The error code."
          },
          "message": {
            "type": "string",
            "description": "A human-readable description of the error."
          }
        }
      }
    }
  }
}